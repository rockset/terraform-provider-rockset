---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "Rockset Provider"
subcategory: ""
description: |-
  
---

# Rockset Provider

The [Rockset](https://rockset.com/) provider is used to interact with the 
[Rockset REST API](https://rockset.com/docs/rest-api/) 
via the [Go client](https://github.com/rockset/rockset-go-client)
in order to configure resources of a Rockset organization.

Visit https://github.com/rockset/terraform-provider-rockset to file any issues for bugs or feedback related to the provider.

## Example Usage

{{tffile "examples/provider/provider.tf"}}

~> Hard-coding credentials into any Terraform configuration is not recommended, and risks secret leakage should this file ever be committed to a public version control system. See [Environment Variables](#environment-variables) for a better alternative.

Creating an S3 integration and a collection from Rockset's sample datasets.

{{tffile "examples/resources/rockset_s3_collection/resource.tf"}}

## Argument Reference

* `api_key` - (optional) Your Rockset [API key](https://rockset.com/docs/rest-api/#createapikey). If not present it will be sourced from the `ROCKSET_APIKEY` environment variable.
* `api_server` - (optional) Your Rockset API server. If not present it will be sourced from the `ROCKSET_APISERVER` environment variable.
* `organization_id` - (optional) The ID of the organization to connect to. If this is set, the provider will validate that the `organization_id` matches the `organization_id` of the api key. If it does not match, the provider will return an error.

The preferred configuration method is by environment variables, as it doesn't expose the API key in a configuration file.

For a list of valid options for Rockset API server visit:

https://rockset.com/docs/rest-api/

-> If you use different organizations for development and production, the `organization_id` is useful for ensuring that the provider is connecting to the expected organization, as the API key doesn't have any visible identifier.

## Known issues

### Missing AWS IAM role

If you create an AWS IAM role in terraform, which then is used to create an integration, you might get an error like this:

```terraform
Error: Authentication failed for AWS cross-account role integration with Role ARN arn:aws:iam::000000000000:role/RocksetRole.
Error: "User: arn:aws:sts::318212636800:assumed-role/apiserver.rs-use1a1-rockset-com/aws-sdk-java-1663200273577 is not authorized to perform: sts:AssumeRole on resource: arn:aws:iam::000000000000:role/RocksetRole"
```

which is due to the upstream AWS provider not waiting for the IAM role resource (`aws_iam_role`) to be ready to use.
You can work around this using a
[time_sleep](https://registry.terraform.io/providers/hashicorp/time/latest/docs/resources/sleep)
resource, e.g.

```
resource "aws_iam_role" "rockset-integration" {
  name               = "rockset-integration"
  assume_role_policy = data.aws_iam_policy_document.rockset-trust-policy.json
}

resource "time_sleep" "wait_10_seconds" {
  depends_on = [aws_iam_role.rockset-integration]
  create_duration = "10s"
}

resource rockset_s3_integration public {
  name = "rockset-public-datasets"
  description = "Integration to access Rockset's public datasets"
  aws_role_arn = aws_iam_role.rockset-integration.arn
  depends_on = [time_sleep.wait_10_seconds]
}
```
